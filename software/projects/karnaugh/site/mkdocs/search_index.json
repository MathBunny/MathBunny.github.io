{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nWelcome to the Karnaugh Map Simplification Software documentation site. The purpose of this website is to provide documentation to both developers and to users.  \n\n\nHistory and Objective\n\n\nThe purpose of this software is to provide a collection of tools for engineers to simplify logical expressions and to visualize the results in a Karnaugh Map. There are two versions of the software. The first version, which was started in 2015 used Java Swing and supported up to four variable visual expression simplification. In the summer of 2017, a new version started development which is being made in JavaFX. \n\n\nFuture Goals\n\n\nThe ultimate goal for this project is to become the standard industry tool in working with boolean algebra expressions. This includes simplification of large expressions, and working on converting expressions between different forms.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "Welcome to the Karnaugh Map Simplification Software documentation site. The purpose of this website is to provide documentation to both developers and to users.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#history-and-objective", 
            "text": "The purpose of this software is to provide a collection of tools for engineers to simplify logical expressions and to visualize the results in a Karnaugh Map. There are two versions of the software. The first version, which was started in 2015 used Java Swing and supported up to four variable visual expression simplification. In the summer of 2017, a new version started development which is being made in JavaFX.", 
            "title": "History and Objective"
        }, 
        {
            "location": "/#future-goals", 
            "text": "The ultimate goal for this project is to become the standard industry tool in working with boolean algebra expressions. This includes simplification of large expressions, and working on converting expressions between different forms.", 
            "title": "Future Goals"
        }, 
        {
            "location": "/theory/", 
            "text": "Boolean Algebra and Operators\n\n\nBoolean algebra is a branch of algebra where the values of variables can only be \ntrue\n or \nfalse\n (often denoted by \n1\n and \n0\n respectfully). We use boolean algebra in circuits, general two-valued logic (such as in mathematics), and boolean operations.\n\n\nThere are multiple operations in boolean algebra, but the ones we will focus on are \nAND\n and \nOR\n. We denote \nAND\n through multiplication (ex: \nAB\n) and we denote \nOR\n through addition (ex: \nA+B\n). These operations follow the commutative property, meaning that the order in which we place the operands does not matter.\n\n\nTruth Tables\n\n\nWhenever we have a boolean expression, we can express it as a function. Similar to \nF(x)\n we can express a two variable function: \nF(AB)\n, where we can say our domain is \n{A,B}\n. Since our input values can only be \ntrue\n or \nfalse\n, we can create a truth table that will show all possible cases with their inputs to the function and the result. Let's take a look at a simple two variable expression, and see how the logic gates \nAND\n and \nOR\n work. \n\n\nFor example, let's take the equation \nF(AB) = AB\n and generate the truth table: \n\n\n\n\n\n\n\n\nF(AB)\n\n\nA\n\n\nB\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n0\n\n\n\n\n\n\n0\n\n\n0\n\n\n1\n\n\n\n\n\n\n0\n\n\n1\n\n\n0\n\n\n\n\n\n\n1\n\n\n1\n\n\n1\n\n\n\n\n\n\n\n\nWe can also take the equation \nF(AB) = A+B\n and generate the truth table:\n\n\n\n\n\n\n\n\nF(A+B)\n\n\nA\n\n\nB\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n0\n\n\n\n\n\n\n1\n\n\n0\n\n\n1\n\n\n\n\n\n\n1\n\n\n1\n\n\n0\n\n\n\n\n\n\n1\n\n\n1\n\n\n1\n\n\n\n\n\n\n\n\nTruth tables are important because we can easily evaluate for the behavior of a function. For user input, it is easier to input truth-tables because we can specify cases such as \nDon't Cares\n, which will be discussed later on.\n\n\nSum of Product Expressions (SOP)\n\n\nLet's consider a more complicated expression \nF(ABCD)= AB'C+BD+CD+D\n and generate its truth table:\n\n\n\n\n\n\n\n\nF(AB'C+BD+CD+D)\n\n\nA\n\n\nB\n\n\nC\n\n\nD\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\n0\n\n\n\n\n\n\n1\n\n\n0\n\n\n0\n\n\n0\n\n\n1\n\n\n\n\n\n\n0\n\n\n0\n\n\n0\n\n\n1\n\n\n0\n\n\n\n\n\n\n1\n\n\n0\n\n\n0\n\n\n1\n\n\n1\n\n\n\n\n\n\n0\n\n\n0\n\n\n1\n\n\n0\n\n\n0\n\n\n\n\n\n\n1\n\n\n0\n\n\n1\n\n\n0\n\n\n1\n\n\n\n\n\n\n0\n\n\n0\n\n\n1\n\n\n1\n\n\n0\n\n\n\n\n\n\n1\n\n\n0\n\n\n1\n\n\n1\n\n\n1\n\n\n\n\n\n\n0\n\n\n1\n\n\n0\n\n\n0\n\n\n0\n\n\n\n\n\n\n1\n\n\n1\n\n\n0\n\n\n0\n\n\n1\n\n\n\n\n\n\n0\n\n\n1\n\n\n0\n\n\n1\n\n\n0\n\n\n\n\n\n\n1\n\n\n1\n\n\n0\n\n\n1\n\n\n1\n\n\n\n\n\n\n1\n\n\n1\n\n\n1\n\n\n0\n\n\n0\n\n\n\n\n\n\n1\n\n\n1\n\n\n1\n\n\n0\n\n\n1\n\n\n\n\n\n\n0\n\n\n1\n\n\n1\n\n\n1\n\n\n0\n\n\n\n\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\n1\n\n\n\n\n\n\n\n\nThis example was definately more involved than the previous expressions. An interesting observation is that we are doing a sum of product evaluation, that is, \nAB'C+BD+CD+D\n is a sum of products. The significance of a sum of product is that when we are doing \n+\n we are in fact invoking the \nOR\n operator. \n\n\nMoreover, the \nOR\n operator returns \ntrue\n so long as any one of its arguements returns \ntrue\n. Therefore, if \nany\n of the terms in the sum of product (SOP) expressions is \ntrue\n, then we know that the final expression is \ntrue\n for certain.\n\n\nExample Algebraic Simplification\n\n\nLet's simplify our expression from the previous truth table example. We can apply ordinary algebra tricks such as factoring. Remember that the \n+\n operator invokes the \nOR\n gate, and that \ntrue or x\n always returns \ntrue\n regardless of \nx\n (as shown in our first truth-table).\n\n\nAB'C+BD+CD+D // Initial expression\nAB'C+BD+D(C+1) // Factor out a D\nAB'C+BD+D // Since (C+1) is always true, as C OR true is always true\nAB'C+D(B+1) // Factor out a D again\nAB'C+D // Since (B+1) is always true, as B OR true is always true\n=AB'C+D // Final expression\n\n\n\n\nAs an exercise to the reader, complete the truth-table to show that they are logically equivalent.", 
            "title": "Theory"
        }, 
        {
            "location": "/theory/#boolean-algebra-and-operators", 
            "text": "Boolean algebra is a branch of algebra where the values of variables can only be  true  or  false  (often denoted by  1  and  0  respectfully). We use boolean algebra in circuits, general two-valued logic (such as in mathematics), and boolean operations.  There are multiple operations in boolean algebra, but the ones we will focus on are  AND  and  OR . We denote  AND  through multiplication (ex:  AB ) and we denote  OR  through addition (ex:  A+B ). These operations follow the commutative property, meaning that the order in which we place the operands does not matter.", 
            "title": "Boolean Algebra and Operators"
        }, 
        {
            "location": "/theory/#truth-tables", 
            "text": "Whenever we have a boolean expression, we can express it as a function. Similar to  F(x)  we can express a two variable function:  F(AB) , where we can say our domain is  {A,B} . Since our input values can only be  true  or  false , we can create a truth table that will show all possible cases with their inputs to the function and the result. Let's take a look at a simple two variable expression, and see how the logic gates  AND  and  OR  work.   For example, let's take the equation  F(AB) = AB  and generate the truth table:      F(AB)  A  B      0  0  0    0  0  1    0  1  0    1  1  1     We can also take the equation  F(AB) = A+B  and generate the truth table:     F(A+B)  A  B      0  0  0    1  0  1    1  1  0    1  1  1     Truth tables are important because we can easily evaluate for the behavior of a function. For user input, it is easier to input truth-tables because we can specify cases such as  Don't Cares , which will be discussed later on.", 
            "title": "Truth Tables"
        }, 
        {
            "location": "/theory/#sum-of-product-expressions-sop", 
            "text": "Let's consider a more complicated expression  F(ABCD)= AB'C+BD+CD+D  and generate its truth table:     F(AB'C+BD+CD+D)  A  B  C  D      0  0  0  0  0    1  0  0  0  1    0  0  0  1  0    1  0  0  1  1    0  0  1  0  0    1  0  1  0  1    0  0  1  1  0    1  0  1  1  1    0  1  0  0  0    1  1  0  0  1    0  1  0  1  0    1  1  0  1  1    1  1  1  0  0    1  1  1  0  1    0  1  1  1  0    1  1  1  1  1     This example was definately more involved than the previous expressions. An interesting observation is that we are doing a sum of product evaluation, that is,  AB'C+BD+CD+D  is a sum of products. The significance of a sum of product is that when we are doing  +  we are in fact invoking the  OR  operator.   Moreover, the  OR  operator returns  true  so long as any one of its arguements returns  true . Therefore, if  any  of the terms in the sum of product (SOP) expressions is  true , then we know that the final expression is  true  for certain.", 
            "title": "Sum of Product Expressions (SOP)"
        }, 
        {
            "location": "/theory/#example-algebraic-simplification", 
            "text": "Let's simplify our expression from the previous truth table example. We can apply ordinary algebra tricks such as factoring. Remember that the  +  operator invokes the  OR  gate, and that  true or x  always returns  true  regardless of  x  (as shown in our first truth-table).  AB'C+BD+CD+D // Initial expression\nAB'C+BD+D(C+1) // Factor out a D\nAB'C+BD+D // Since (C+1) is always true, as C OR true is always true\nAB'C+D(B+1) // Factor out a D again\nAB'C+D // Since (B+1) is always true, as B OR true is always true\n=AB'C+D // Final expression  As an exercise to the reader, complete the truth-table to show that they are logically equivalent.", 
            "title": "Example Algebraic Simplification"
        }
    ]
}